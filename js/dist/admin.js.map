{"version":3,"file":"admin.js","mappings":";;;;;;;;;;;;;;AAAmC;AAEnCC,KAAK,CAAC,QAAQ,CAAC;AAEfD,wEAAoB,CAAC,8BAA8B,EAAE,YAAM;EACzDA,4EACM,CAAC,8BAA8B,CAAC,CACnCK,eAAe,CAAC;IACfC,OAAO,EAAE,2CAA2C;IACpDC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAER,wEAAoB,CACzB,0DACF;EACF,CAAC,CAAC,CACDK,eAAe,CAAC;IACfC,OAAO,EAAE,wCAAwC;IACjDC,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAER,wEAAoB,CACzB,uDACF,CAAC;IACDW,OAAO,EAAE;MACPC,MAAM,EAAEZ,wEAAoB,CAC1B,sEACF,CAAC;MACDa,KAAK,EAAEb,wEAAoB,CACzB,qEACF;IACF,CAAC;IACD,WAAS,QAAQ;IACjBc,IAAI,EAAE;EACR,CAAC,CAAC,CACDT,eAAe,CAAC;IACfC,OAAO,EAAE,8CAA8C;IACvDC,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAER,wEAAoB,CACzB,6DACF,CAAC;IACDe,GAAG,EAAE,CAAC;IACND,IAAI,EAAEd,wEAAoB,CACxB,kEACF;EACF,CAAC,CAAC,CACDK,eAAe,CAAC;IACfC,OAAO,EAAE,uCAAuC;IAChDC,IAAI,EAAE,QAAQ;IACdC,KAAK,EAAER,wEAAoB,CACzB,sDACF,CAAC;IACDW,OAAO,EAAE;MACPK,UAAU,EAAEhB,wEAAoB,CAC9B,yEACF,CAAC;MACDiB,SAAS,EAAEjB,wEAAoB,CAC7B,wEACF,CAAC;MACDkB,WAAW,EAAElB,wEAAoB,CAC/B,0EACF;IACF,CAAC;IACD,WAAS;EACX,CAAC,CAAC,CACDK,eAAe,CAAC;IACfC,OAAO,EAAE,oCAAoC;IAC7CC,IAAI,EAAE,MAAM;IACZC,KAAK,EAAER,wEAAoB,CACzB,mDACF,CAAC;IACDc,IAAI,EAAEd,wEAAoB,CACxB,wDACF,CAAC;IACDmB,WAAW,EAAE;EACf,CAAC,CAAC;AACN,CAAC,CAAC;;;;;;;;;;;ACxEF;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D","sources":["webpack://@nearata/flarum-ext-related-discussions/./src/admin/index.ts","webpack://@nearata/flarum-ext-related-discussions/external root \"flarum.core.compat['admin/app']\"","webpack://@nearata/flarum-ext-related-discussions/webpack/bootstrap","webpack://@nearata/flarum-ext-related-discussions/webpack/runtime/compat get default export","webpack://@nearata/flarum-ext-related-discussions/webpack/runtime/define property getters","webpack://@nearata/flarum-ext-related-discussions/webpack/runtime/hasOwnProperty shorthand","webpack://@nearata/flarum-ext-related-discussions/webpack/runtime/make namespace object"],"sourcesContent":["import app from \"flarum/admin/app\";\n\nalert(\"Fuck p\");\n\napp.initializers.add(\"badlogic-related-discussions\", () => {\n  app.extensionData\n    .for(\"badlogic-related-discussions\")\n    .registerSetting({\n      setting: \"badlogic-related-discussions.allow-guests\",\n      type: \"boolean\",\n      label: app.translator.trans(\n        \"badlogic-related-discussions.admin.settings.allow_guests\"\n      ),\n    })\n    .registerSetting({\n      setting: \"badlogic-related-discussions.generator\",\n      type: \"select\",\n      label: app.translator.trans(\n        \"badlogic-related-discussions.admin.settings.generator\"\n      ),\n      options: {\n        random: app.translator.trans(\n          \"badlogic-related-discussions.admin.settings.generator_options.random\"\n        ),\n        title: app.translator.trans(\n          \"badlogic-related-discussions.admin.settings.generator_options.title\"\n        ),\n      },\n      default: \"random\",\n      help: \"\",\n    })\n    .registerSetting({\n      setting: \"badlogic-related-discussions.max-discussions\",\n      type: \"number\",\n      label: app.translator.trans(\n        \"badlogic-related-discussions.admin.settings.max_discussions\"\n      ),\n      min: 1,\n      help: app.translator.trans(\n        \"badlogic-related-discussions.admin.settings.max_discussions_help\"\n      ),\n    })\n    .registerSetting({\n      setting: \"badlogic-related-discussions.position\",\n      type: \"select\",\n      label: app.translator.trans(\n        \"badlogic-related-discussions.admin.settings.position\"\n      ),\n      options: {\n        first_post: app.translator.trans(\n          \"badlogic-related-discussions.admin.settings.position_options.first_post\"\n        ),\n        last_post: app.translator.trans(\n          \"badlogic-related-discussions.admin.settings.position_options.last_post\"\n        ),\n        reply_block: app.translator.trans(\n          \"badlogic-related-discussions.admin.settings.position_options.reply_block\"\n        ),\n      },\n      default: \"first_post\",\n    })\n    .registerSetting({\n      setting: \"badlogic-related-discussions.cache\",\n      type: \"text\",\n      label: app.translator.trans(\n        \"badlogic-related-discussions.admin.settings.cache\"\n      ),\n      help: app.translator.trans(\n        \"badlogic-related-discussions.admin.settings.cache_help\"\n      ),\n      placeholder: \"0d0h0m\",\n    });\n});\n","module.exports = flarum.core.compat['admin/app'];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};"],"names":["app","alert","initializers","add","extensionData","registerSetting","setting","type","label","translator","trans","options","random","title","help","min","first_post","last_post","reply_block","placeholder"],"sourceRoot":""}